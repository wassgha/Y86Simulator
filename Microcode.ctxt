#BlueJ class context
comment0.params=machine
comment0.target=Microcode(Machine)
comment1.params=
comment1.target=void\ fetchExec()
comment1.text=\n\ Method\ fetchExec\ performs\ the\ fetch-execute\ cycle\n
comment2.params=instruction\ fetch
comment2.target=void\ executeRTNOperations(byte[],\ boolean)
comment2.text=\n\ Method\ executeRTNOperations\ gets\ the\ RTN\ definition\ of\ the\ instruction\ then\ performs\ the\ RTN\n\ commands\ one\ by\ one\ if\ the\ condition\ is\ satisfied\n\n\ @param\ instruction\ the\ instruction\ (array\ of\ word-sized\ bytes)\n\ @param\ fetch\ determines\ whether\ this\ is\ the\ fetch\ operation\ or\ not\ (fetch\ operation's\ definition\ is\ stored\ separately\ in\ the\ RTN)\n
comment3.params=ALUOp\ immediateVal\ fetch
comment3.target=void\ performALUOp(java.lang.String,\ java.lang.Integer,\ boolean)
comment3.text=\n\ Method\ performALUOp,\ translates\ the\ arithmetic\ operation\ given\ as\ a\ string\ to\ a\ method\ from\ the\ ALU\n\ and\ executes\ it\ (results\ always\ stored\ in\ register\ C)\n\n\ @param\ ALUOp\ the\ arithmetic\ operation\ (string,\ one\ of\ "+",\ "-",\ etc)\n\ @param\ immediateVal\ if\ the\ operation\ is\ an\ increment/decrement\ operation\ then\ use\ the\ value\ to\ perform\ the\ operation\n\ @param\ fetch\ true\ if\ this\ is\ the\ fetch\ operation,\ prevents\ updating\ flags\n
comment4.params=operand\ instruction
comment4.target=void\ readOperandValueToBus(java.lang.String,\ byte[])
comment4.text=\n\ Method\ readOperandValueToBus\ reads\ the\ value\ of\ the\ register\ indicated\ by\ the\ operand\n\ and\ writes\ it\ to\ the\ system\ bus\n\n\ @param\ operand\ the\ right\ operand\ of\ the\ assignment\ (either\ a\ register\ name\ or\ an\ argument\ of\ the\ instruction)\n\ @param\ instruction\ the\ instruction\ itself\ (used\ to\ get\ the\ arguments)\n
comment5.params=operand\ instruction
comment5.target=void\ writeOperandValue(java.lang.String,\ byte[])
numComments=6
